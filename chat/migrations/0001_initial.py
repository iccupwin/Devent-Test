# Generated by Django 5.2 on 2025-05-09 14:59

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('model_type', models.CharField(choices=[('claude', 'Claude AI'), ('gpt', 'ChatGPT'), ('deepseek', 'DeepSeek')], max_length=20)),
                ('version', models.CharField(max_length=50)),
                ('api_base_url', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'ИИ-модель',
                'verbose_name_plural': 'ИИ-модели',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PlanfixCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache_name', models.CharField(max_length=100, unique=True)),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('entries_count', models.IntegerField(default=0)),
                ('update_duration', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name': 'Кэш Planfix',
                'verbose_name_plural': 'Кэши Planfix',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, verbose_name='username')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('role', models.CharField(choices=[('user', 'Пользователь'), ('admin', 'Администратор')], default='user', max_length=20)),
                ('planfix_user_id', models.CharField(blank=True, max_length=100, null=True)),
                ('planfix_api_token', models.CharField(blank=True, max_length=255, null=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('preferred_ai_model', models.CharField(default='claude', max_length=50)),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('phone', models.CharField(blank=True, max_length=32, verbose_name='phone')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('planfix_task_id', models.CharField(blank=True, max_length=100, null=True)),
                ('planfix_project_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('summary', models.TextField(blank=True, null=True)),
                ('ai_model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conversations', to='chat.aimodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Беседа',
                'verbose_name_plural': 'Беседы',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('conversation_start', 'Начало беседы'), ('conversation_end', 'Завершение беседы'), ('message_sent', 'Отправлено сообщение'), ('ai_response', 'Ответ ИИ'), ('task_integration', 'Интеграция с задачей'), ('cache_refresh', 'Обновление кэша'), ('login', 'Вход в систему'), ('logout', 'Выход из системы'), ('error', 'Ошибка')], max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('planfix_task_id', models.CharField(blank=True, max_length=100, null=True)),
                ('planfix_project_id', models.CharField(blank=True, max_length=100, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('ai_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='chat.aimodel')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to=settings.AUTH_USER_MODEL)),
                ('conversation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='chat.conversation')),
            ],
            options={
                'verbose_name': 'Событие аналитики',
                'verbose_name_plural': 'События аналитики',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('user', 'Пользователь'), ('assistant', 'Ассистент'), ('system', 'Система')], max_length=10)),
                ('content', models.TextField()),
                ('tokens', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('processing_time', models.FloatField(default=0.0, verbose_name='Время обработки (сек)')),
                ('ai_model_used', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='chat.aimodel')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='chat.conversation')),
                ('parent_message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='chat.message')),
            ],
            options={
                'verbose_name': 'Сообщение',
                'verbose_name_plural': 'Сообщения',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlanfixTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('status', models.CharField(max_length=100)),
                ('project_id', models.CharField(blank=True, max_length=100, null=True)),
                ('project_name', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('assignee', models.CharField(blank=True, max_length=255, null=True)),
                ('assigner', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('is_completed', models.BooleanField(default=False)),
                ('is_overdue', models.BooleanField(default=False)),
                ('last_sync', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Задача Planfix',
                'verbose_name_plural': 'Задачи Planfix',
                'indexes': [models.Index(fields=['task_id'], name='chat_planfi_task_id_a71e31_idx'), models.Index(fields=['project_id'], name='chat_planfi_project_111631_idx'), models.Index(fields=['status'], name='chat_planfi_status_fc0930_idx'), models.Index(fields=['is_completed'], name='chat_planfi_is_comp_2032f5_idx'), models.Index(fields=['is_overdue'], name='chat_planfi_is_over_1bcfd0_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserActivityDaily',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('messages_count', models.IntegerField(default=0)),
                ('conversations_count', models.IntegerField(default=0)),
                ('tokens_used', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.DateField()),
                ('conversations_count', models.IntegerField(default=0)),
                ('messages_sent', models.IntegerField(default=0)),
                ('tokens_used', models.IntegerField(default=0)),
                ('tasks_integrated', models.IntegerField(default=0)),
                ('average_response_time', models.FloatField(default=0.0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Метрика пользователя',
                'verbose_name_plural': 'Метрики пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(choices=[('light', 'Светлая'), ('dark', 'Темная'), ('system', 'Системная')], default='system', max_length=20, verbose_name='Тема оформления')),
                ('language', models.CharField(choices=[('ru', 'Русский'), ('en', 'Английский')], default='ru', max_length=10, verbose_name='Язык интерфейса')),
                ('enable_notifications', models.BooleanField(default=True, verbose_name='Включить уведомления')),
                ('show_completed_tasks', models.BooleanField(default=True, verbose_name='Показывать завершенные задачи')),
                ('default_page_size', models.IntegerField(choices=[(10, '10'), (25, '25'), (50, '50'), (100, '100')], default=25, verbose_name='Размер страницы по умолчанию')),
                ('email_notifications', models.BooleanField(default=False, verbose_name='Уведомления по электронной почте')),
                ('auto_refresh_cache', models.BooleanField(default=True, verbose_name='Автоматическое обновление кэша')),
                ('conversation_history_limit', models.IntegerField(default=30, help_text='Через сколько дней архивировать старые беседы', verbose_name='Лимит истории бесед (дней)')),
                ('export_analytics', models.BooleanField(default=True, verbose_name='Разрешить экспорт аналитики')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ai_model_preference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preferred_by_users', to='chat.aimodel', verbose_name='Предпочитаемая модель ИИ')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Настройки пользователя',
                'verbose_name_plural': 'Настройки пользователей',
            },
        ),
        migrations.CreateModel(
            name='AIModelMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.DateField()),
                ('requests_count', models.IntegerField(default=0)),
                ('tokens_used', models.IntegerField(default=0)),
                ('average_response_time', models.FloatField(default=0.0)),
                ('error_count', models.IntegerField(default=0)),
                ('ai_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='chat.aimodel')),
            ],
            options={
                'verbose_name': 'Метрика ИИ-модели',
                'verbose_name_plural': 'Метрики ИИ-моделей',
                'indexes': [models.Index(fields=['ai_model', 'day'], name='chat_aimode_ai_mode_69e972_idx'), models.Index(fields=['day'], name='chat_aimode_day_f9939b_idx')],
                'unique_together': {('ai_model', 'day')},
            },
        ),
        migrations.CreateModel(
            name='AIUsageDaily',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('requests_count', models.IntegerField(default=0)),
                ('tokens_used', models.IntegerField(default=0)),
                ('average_response_time', models.FloatField(default=0.0)),
                ('ai_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chat.aimodel')),
            ],
            options={
                'indexes': [models.Index(fields=['date'], name='chat_aiusag_date_ae2ba8_idx'), models.Index(fields=['ai_model'], name='chat_aiusag_ai_mode_a23e22_idx')],
                'unique_together': {('date', 'ai_model')},
            },
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['user', '-updated_at'], name='chat_conver_user_id_e2a76b_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['planfix_task_id'], name='chat_conver_planfix_4d4794_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['planfix_project_id'], name='chat_conver_planfix_907587_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticsevent',
            index=models.Index(fields=['event_type', 'timestamp'], name='chat_analyt_event_t_13dd9c_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticsevent',
            index=models.Index(fields=['user', 'timestamp'], name='chat_analyt_user_id_afa211_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['conversation', 'created_at'], name='chat_messag_convers_3154fc_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['role'], name='chat_messag_role_9cd150_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivitydaily',
            index=models.Index(fields=['date'], name='chat_userac_date_11e8a7_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivitydaily',
            index=models.Index(fields=['user'], name='chat_userac_user_id_837e23_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='useractivitydaily',
            unique_together={('date', 'user')},
        ),
        migrations.AddIndex(
            model_name='usermetrics',
            index=models.Index(fields=['user', 'day'], name='chat_userme_user_id_9432b6_idx'),
        ),
        migrations.AddIndex(
            model_name='usermetrics',
            index=models.Index(fields=['day'], name='chat_userme_day_ef89e0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usermetrics',
            unique_together={('user', 'day')},
        ),
    ]
